// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocolImage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocolImage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocolImage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocolImage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocolImage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocolImage_2eproto;
namespace protocol_msg {
class ImageMsg;
struct ImageMsgDefaultTypeInternal;
extern ImageMsgDefaultTypeInternal _ImageMsg_default_instance_;
}  // namespace protocol_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol_msg::ImageMsg* Arena::CreateMaybeMessage<::protocol_msg::ImageMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol_msg {

// ===================================================================

class ImageMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol_msg.ImageMsg) */ {
 public:
  inline ImageMsg() : ImageMsg(nullptr) {}
  ~ImageMsg() override;
  explicit constexpr ImageMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMsg(const ImageMsg& from);
  ImageMsg(ImageMsg&& from) noexcept
    : ImageMsg() {
    *this = ::std::move(from);
  }

  inline ImageMsg& operator=(const ImageMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMsg& operator=(ImageMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMsg* internal_default_instance() {
    return reinterpret_cast<const ImageMsg*>(
               &_ImageMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageMsg& a, ImageMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMsg* New() const final {
    return new ImageMsg();
  }

  ImageMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol_msg.ImageMsg";
  }
  protected:
  explicit ImageMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 3,
    kImgDataFieldNumber = 5,
    kTimestampFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
    kImgSizeFieldNumber = 4,
  };
  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes img_data = 5;
  void clear_img_data();
  const std::string& img_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_img_data();
  void set_allocated_img_data(std::string* img_data);
  private:
  const std::string& _internal_img_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img_data(const std::string& value);
  std::string* _internal_mutable_img_data();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msg_type = 1;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 img_size = 4;
  void clear_img_size();
  ::PROTOBUF_NAMESPACE_ID::int32 img_size() const;
  void set_img_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_img_size() const;
  void _internal_set_img_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol_msg.ImageMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 img_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocolImage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMsg

// int32 msg_type = 1;
inline void ImageMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:protocol_msg.ImageMsg.msg_type)
  return _internal_msg_type();
}
inline void ImageMsg::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void ImageMsg::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:protocol_msg.ImageMsg.msg_type)
}

// int64 timestamp = 2;
inline void ImageMsg::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol_msg.ImageMsg.timestamp)
  return _internal_timestamp();
}
inline void ImageMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ImageMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protocol_msg.ImageMsg.timestamp)
}

// string user_id = 3;
inline void ImageMsg::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& ImageMsg::user_id() const {
  // @@protoc_insertion_point(field_get:protocol_msg.ImageMsg.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageMsg::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol_msg.ImageMsg.user_id)
}
inline std::string* ImageMsg::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:protocol_msg.ImageMsg.user_id)
  return _s;
}
inline const std::string& ImageMsg::_internal_user_id() const {
  return user_id_.Get();
}
inline void ImageMsg::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageMsg::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageMsg::release_user_id() {
  // @@protoc_insertion_point(field_release:protocol_msg.ImageMsg.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImageMsg::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol_msg.ImageMsg.user_id)
}

// int32 img_size = 4;
inline void ImageMsg::clear_img_size() {
  img_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::_internal_img_size() const {
  return img_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::img_size() const {
  // @@protoc_insertion_point(field_get:protocol_msg.ImageMsg.img_size)
  return _internal_img_size();
}
inline void ImageMsg::_internal_set_img_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  img_size_ = value;
}
inline void ImageMsg::set_img_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_img_size(value);
  // @@protoc_insertion_point(field_set:protocol_msg.ImageMsg.img_size)
}

// bytes img_data = 5;
inline void ImageMsg::clear_img_data() {
  img_data_.ClearToEmpty();
}
inline const std::string& ImageMsg::img_data() const {
  // @@protoc_insertion_point(field_get:protocol_msg.ImageMsg.img_data)
  return _internal_img_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageMsg::set_img_data(ArgT0&& arg0, ArgT... args) {
 
 img_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol_msg.ImageMsg.img_data)
}
inline std::string* ImageMsg::mutable_img_data() {
  std::string* _s = _internal_mutable_img_data();
  // @@protoc_insertion_point(field_mutable:protocol_msg.ImageMsg.img_data)
  return _s;
}
inline const std::string& ImageMsg::_internal_img_data() const {
  return img_data_.Get();
}
inline void ImageMsg::_internal_set_img_data(const std::string& value) {
  
  img_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageMsg::_internal_mutable_img_data() {
  
  return img_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageMsg::release_img_data() {
  // @@protoc_insertion_point(field_release:protocol_msg.ImageMsg.img_data)
  return img_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImageMsg::set_allocated_img_data(std::string* img_data) {
  if (img_data != nullptr) {
    
  } else {
    
  }
  img_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol_msg.ImageMsg.img_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocolImage_2eproto
